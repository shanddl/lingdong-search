name: Build and Release Chrome Extension

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Read version from manifest
        id: manifest
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          NAME=$(node -p "require('./manifest.json').name.replace(/\s+/g, '-').toLowerCase()")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "📦 Extension: $NAME"
          echo "📝 Version: $VERSION"

      - name: Build extension package
        id: build
        run: |
          echo "🚀 Starting build process..."
          set -e
          
          # 运行构建脚本（会生成ZIP和CRX）
          node scripts/build-crx-github.js
          
          echo "📋 Checking for build artifacts..."
          
          # 查找统一命名的文件
          BASE_NAME="${{ steps.manifest.outputs.name }}-v${{ steps.manifest.outputs.version }}"
          ZIP_FILE="${BASE_NAME}.zip"
          CRX_FILE="${BASE_NAME}.crx"
          
          FILES_FOUND=""
          
          if [ -f "$ZIP_FILE" ]; then
            echo "✅ Found ZIP file: $ZIP_FILE"
            echo "zip_file=$ZIP_FILE" >> $GITHUB_OUTPUT
            FILES_FOUND="$FILES_FOUND $ZIP_FILE"
          else
            echo "❌ ZIP file not found: $ZIP_FILE"
            exit 1
          fi
          
          if [ -f "$CRX_FILE" ]; then
            echo "✅ Found CRX file: $CRX_FILE"
            echo "crx_file=$CRX_FILE" >> $GITHUB_OUTPUT
            FILES_FOUND="$FILES_FOUND $CRX_FILE"
          else
            echo "⚠️ CRX file not found: $CRX_FILE (only ZIP will be available)"
          fi
          
          # 输出所有文件列表（用换行分隔）
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES_FOUND" | tr ' ' '\n' | grep -v '^$' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "📦 Build artifacts:${FILES_FOUND}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-${{ steps.manifest.outputs.name }}-v${{ steps.manifest.outputs.version }}
          path: |
            ${{ steps.build.outputs.zip_file }}
            ${{ steps.build.outputs.crx_file }}
            *.zip
            *.crx
          retention-days: 90

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.build.outputs.zip_file }}
            ${{ steps.build.outputs.crx_file }}
          body: |
            ## 🚀 Release v${{ steps.manifest.outputs.version }}
            
            ### 📦 下载
            - [下载 ZIP 文件](./${{ steps.build.outputs.zip_file }})
            - [下载 CRX 文件](./${{ steps.build.outputs.crx_file }})
            
            ### 📝 更新内容
            - 查看 [Commit History](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}) 了解详细变更
            
            ### 🔧 安装方式
            
            **方式一：使用 ZIP 文件（推荐）**
            1. 下载 ZIP 文件并解压
            2. 打开 Chrome 浏览器，访问 `chrome://extensions/`
            3. 启用"开发者模式"（右上角）
            4. 点击"加载已解压的扩展程序"
            5. 选择解压后的文件夹
            
            **方式二：使用 CRX 文件**
            1. 下载 CRX 文件
            2. 打开 Chrome 浏览器，访问 `chrome://extensions/`
            3. 启用"开发者模式"（右上角）
            4. 将下载的 CRX 文件拖拽到页面中完成安装
            
            ---
            
            **自动化构建**: 此版本由 GitHub Actions 自动构建生成
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        if: always()
        run: |
          echo "## 📦 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Extension**: ${{ steps.manifest.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.manifest.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **File**: ${{ steps.build.outputs.file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: $(echo "${{ steps.build.outputs.type }}" | tr '[:lower:]' '[:upper:]')" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
