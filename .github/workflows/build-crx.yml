name: Build and Release Chrome Extension

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    # „ÄêÈáçË¶Å„ÄëÂøÖÈ°ªËÆæÁΩÆÊùÉÈôêÊâçËÉΩÂàõÂª∫ Release
    permissions:
      contents: write  # ÂàõÂª∫ Release Âíå‰∏ä‰º†Êñá‰ª∂ÈúÄË¶Å write ÊùÉÈôê
      actions: read    # ËØªÂèñ Actions Áä∂ÊÄÅ
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Read version from manifest
        id: manifest
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          # Áªü‰∏Ä‰ΩøÁî®Âõ∫ÂÆöÁöÑÊñá‰ª∂ÂêçÂâçÁºÄÔºåÁ°Æ‰øùËßÑËåÉ‰∏îÈìæÊé•‰∏ç‰ºöÂ§±Êïà
          NAME="lingdong-search"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "üì¶ Extension: $NAME"
          echo "üìù Version: $VERSION"

      - name: Build extension package
        id: build
        run: |
          echo "üöÄ Starting build process..."
          set -e
          
          # ËøêË°åÊûÑÂª∫ËÑöÊú¨Ôºà‰ºöÁîüÊàêZIPÂíåCRXÔºâ
          node scripts/build-crx-github.js
          
          echo "üìã Checking for build artifacts..."
          
          # Êü•ÊâæÁªü‰∏ÄÂëΩÂêçÁöÑÊñá‰ª∂ÔºàÊñá‰ª∂ÂêçÂâçÁºÄÂõ∫ÂÆö‰∏∫ lingdong-searchÔºâ
          BASE_NAME="lingdong-search-v${{ steps.manifest.outputs.version }}"
          ZIP_FILE="${BASE_NAME}.zip"
          CRX_FILE="${BASE_NAME}.crx"
          
          FILES_FOUND=""
          
          if [ -f "$ZIP_FILE" ]; then
            echo "‚úÖ Found ZIP file: $ZIP_FILE"
            echo "zip_file=$ZIP_FILE" >> $GITHUB_OUTPUT
            FILES_FOUND="$FILES_FOUND $ZIP_FILE"
          else
            echo "‚ùå ZIP file not found: $ZIP_FILE"
            exit 1
          fi
          
          if [ -f "$CRX_FILE" ]; then
            echo "‚úÖ Found CRX file: $CRX_FILE"
            echo "crx_file=$CRX_FILE" >> $GITHUB_OUTPUT
            FILES_FOUND="$FILES_FOUND $CRX_FILE"
          else
            echo "‚ö†Ô∏è CRX file not found: $CRX_FILE (only ZIP will be available)"
          fi
          
          # ËæìÂá∫ÊâÄÊúâÊñá‰ª∂ÂàóË°®ÔºàÁî®Êç¢Ë°åÂàÜÈöîÔºâ
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES_FOUND" | tr ' ' '\n' | grep -v '^$' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "üì¶ Build artifacts:${FILES_FOUND}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-${{ steps.manifest.outputs.name }}-v${{ steps.manifest.outputs.version }}
          path: |
            ${{ steps.build.outputs.zip_file }}
            ${{ steps.build.outputs.crx_file }}
            *.zip
            *.crx
          retention-days: 90

      - name: Prepare Release files
        if: startsWith(github.ref, 'refs/tags/v')
        id: release_files
        run: |
          BASE_NAME="${{ steps.manifest.outputs.name }}-v${{ steps.manifest.outputs.version }}"
          ZIP_FILE="${BASE_NAME}.zip"
          CRX_FILE="${BASE_NAME}.crx"
          
          echo "üîç Checking files for release..."
          echo "ZIP_FILE: $ZIP_FILE"
          echo "CRX_FILE: $CRX_FILE"
          
          RELEASE_FILES=""
          
          if [ -f "$ZIP_FILE" ]; then
            echo "‚úÖ ZIP file exists: $ZIP_FILE"
            RELEASE_FILES="$RELEASE_FILES$ZIP_FILE\n"
          else
            echo "‚ùå ZIP file not found: $ZIP_FILE"
          fi
          
          if [ -f "$CRX_FILE" ]; then
            echo "‚úÖ CRX file exists: $CRX_FILE"
            RELEASE_FILES="$RELEASE_FILES$CRX_FILE\n"
          else
            echo "‚ö†Ô∏è CRX file not found: $CRX_FILE"
          fi
          
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_FILES" | grep -v '^$' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "üì¶ Release files prepared:"
          echo -e "$RELEASE_FILES"

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.release_files.outputs.files }}
          fail_on_unmatched_files: false
          body: |
            ## üöÄ Release v${{ steps.manifest.outputs.version }}
            
            ### üì¶ ‰∏ãËΩΩ
            - [üì¶ ‰∏ãËΩΩ ZIP Êñá‰ª∂](./lingdong-search-v${{ steps.manifest.outputs.version }}.zip)
            - [üì¶ ‰∏ãËΩΩ CRX Êñá‰ª∂](./lingdong-search-v${{ steps.manifest.outputs.version }}.crx)
            
            **Êñá‰ª∂ÂêçÊ†ºÂºèÔºàÁªü‰∏ÄÂâçÁºÄÔºâÔºö**
            - ZIP: `lingdong-search-v${{ steps.manifest.outputs.version }}.zip`
            - CRX: `lingdong-search-v${{ steps.manifest.outputs.version }}.crx`
            
            ### üìù Êõ¥Êñ∞ÂÜÖÂÆπ
            - Êü•Áúã [Commit History](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}) ‰∫ÜËß£ËØ¶ÁªÜÂèòÊõ¥
            
            ### üîß ÂÆâË£ÖÊñπÂºè
            
            **ÊñπÂºè‰∏ÄÔºö‰ΩøÁî® ZIP Êñá‰ª∂ÔºàÊé®ËçêÔºâ**
            1. ‰∏ãËΩΩ ZIP Êñá‰ª∂Âπ∂Ëß£Âéã
            2. ÊâìÂºÄ Chrome ÊµèËßàÂô®ÔºåËÆøÈóÆ `chrome://extensions/`
            3. ÂêØÁî®"ÂºÄÂèëËÄÖÊ®°Âºè"ÔºàÂè≥‰∏äËßíÔºâ
            4. ÁÇπÂáª"Âä†ËΩΩÂ∑≤Ëß£ÂéãÁöÑÊâ©Â±ïÁ®ãÂ∫è"
            5. ÈÄâÊã©Ëß£ÂéãÂêéÁöÑÊñá‰ª∂Â§π
            
            **ÊñπÂºè‰∫åÔºö‰ΩøÁî® CRX Êñá‰ª∂**
            1. ‰∏ãËΩΩ CRX Êñá‰ª∂
            2. ÊâìÂºÄ Chrome ÊµèËßàÂô®ÔºåËÆøÈóÆ `chrome://extensions/`
            3. ÂêØÁî®"ÂºÄÂèëËÄÖÊ®°Âºè"ÔºàÂè≥‰∏äËßíÔºâ
            4. Â∞Ü‰∏ãËΩΩÁöÑ CRX Êñá‰ª∂ÊãñÊãΩÂà∞È°µÈù¢‰∏≠ÂÆåÊàêÂÆâË£Ö
            
            ---
            
            **Ëá™Âä®ÂåñÊûÑÂª∫**: Ê≠§ÁâàÊú¨Áî± GitHub Actions Ëá™Âä®ÊûÑÂª∫ÁîüÊàê
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        if: always()
        run: |
          echo "## üì¶ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Extension**: ${{ steps.manifest.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.manifest.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ZIP File**: ${{ steps.build.outputs.zip_file }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.build.outputs.crx_file }}" ]; then
            echo "- **CRX File**: ${{ steps.build.outputs.crx_file }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **CRX File**: Not generated" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
