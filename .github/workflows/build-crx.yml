name: 构建 CRX 扩展包

on:
  push:
    # 监听main分支的代码变更
    branches:
      - main
    # 监听tag推送（用于创建Release）
    tags:
      - 'v*'
    # 路径过滤（仅对分支推送生效，tag推送不受影响）
    paths:
      - 'js/**'
      - 'manifest.json'
      - 'package.json'
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写入权限来创建Release
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 读取版本号
        id: version
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "扩展版本: $VERSION"
      
      - name: 生成私钥（如果不存在）
        run: |
          if [ ! -f "private-key.pem" ]; then
            echo "🔑 生成私钥文件..."
            node -e "
              const NodeRSA = require('node-rsa');
              const fs = require('fs');
              const key = new NodeRSA({ b: 2048 });
              const privateKey = key.exportKey('pkcs1-private-pem');
              fs.writeFileSync('private-key.pem', privateKey);
              console.log('✅ 私钥生成成功');
            "
          else
            echo "✅ 私钥文件已存在"
          fi
      
      - name: 构建 CRX 文件
        run: |
          echo "🚀 开始构建 CRX 文件..."
          npm run build
          
          # 如果CRX构建失败，生成ZIP作为备用
          if [ ! -f *.crx ]; then
            echo "⚠️ CRX 构建失败，生成 ZIP 作为备用..."
            npm run package || node scripts/package-extension.js
          fi
      
      - name: 列出构建产物
        run: |
          echo "📦 查找构建产物："
          ls -la *.crx 2>/dev/null || echo "未找到 .crx 文件"
          ls -la *.zip 2>/dev/null || echo "未找到 .zip 文件"
          echo "当前目录文件："
          ls -la | head -20
      
      - name: 准备Release文件
        id: release_files
        run: |
          # 查找所有构建产物
          CRX_FILES=$(find . -maxdepth 1 -name "*.crx" -type f 2>/dev/null | head -1)
          ZIP_FILES=$(find . -maxdepth 1 -name "*.zip" -type f 2>/dev/null | head -1)
          
          if [ -n "$CRX_FILES" ]; then
            echo "found_crx=$CRX_FILES" >> $GITHUB_OUTPUT
            echo "✅ 找到CRX文件: $CRX_FILES"
          else
            echo "found_crx=" >> $GITHUB_OUTPUT
            echo "⚠️ 未找到CRX文件"
          fi
          
          if [ -n "$ZIP_FILES" ]; then
            echo "found_zip=$ZIP_FILES" >> $GITHUB_OUTPUT
            echo "✅ 找到ZIP文件: $ZIP_FILES"
          else
            echo "found_zip=" >> $GITHUB_OUTPUT
            echo "⚠️ 未找到ZIP文件"
          fi
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: |
            *.crx
            *.zip
          retention-days: 30
      
      - name: 检查是否应该创建 Release
        id: check_release
        run: |
          # 如果推送了tag，或者手动触发，则创建Release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_create=true" >> $GITHUB_OUTPUT
            echo "触发方式: 手动触发"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should_create=true" >> $GITHUB_OUTPUT
            echo "触发方式: Tag推送 - ${{ github.ref }}"
            # 从tag中提取版本号
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            # 检查本次提交是否修改了manifest.json
            if git diff --name-only HEAD~1 HEAD | grep -q "manifest.json"; then
              echo "should_create=true" >> $GITHUB_OUTPUT
              echo "触发方式: manifest.json版本变更"
            else
              echo "should_create=false" >> $GITHUB_OUTPUT
              echo "跳过Release创建（仅代码更新，无版本变更）"
            fi
          fi
      
      - name: 创建或更新 Release
        if: steps.check_release.outputs.should_create == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.release_files.outputs.found_crx }}
            ${{ steps.release_files.outputs.found_zip }}
          tag_name: ${{ steps.check_release.outputs.tag_name || format('v{0}', steps.version.outputs.version) }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## 版本 v${{ steps.version.outputs.version }}
            
            ### 构建信息
            - **构建时间**: ${{ github.run_started_at }}
            - **提交**: ${{ github.sha }}
            - **提交消息**: ${{ github.event.head_commit.message || github.event.pusher.name }}
            
            ### 下载说明
            请下载对应的扩展包文件（.crx 或 .zip）并安装到 Chrome 浏览器中。
            
            **安装方法**：
            1. 下载 `.crx` 文件（如果生成成功）
            2. 或者下载 `.zip` 文件并解压
            3. 打开 Chrome，进入 `chrome://extensions/`
            4. 启用"开发者模式"
            5. 点击"加载已解压的扩展程序"，选择解压后的文件夹
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false  # 如果文件不存在也不失败
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
